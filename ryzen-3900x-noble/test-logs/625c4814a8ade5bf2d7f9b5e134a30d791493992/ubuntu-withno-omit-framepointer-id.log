#####
ubuntu-withno-omit-framepointer-id - Run 1
2024-04-25 18:05:25
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.00022006
time for a(i:k:j): 0.337565
time for a(idx): 0.620677
time for a(:,i:j): 0.000236034
time for a(i:j,:): 0.506391
time for a(:,idx): 0.485445
time for a(idx,:): 0.513524
time for a(:,:,i:j,k): 0.000294924
time for a(:,:,k,i:j): 0.146099
time for a(i,j,k,:): 0.135921
time for a(ones(1, k), :), a row vector: 0.450361
time for a(:, ones(1, k)), a column vector: 0.400602
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0468681
time to add two uint8 vectors: 0.0149322
time to subtract two uint8 vectors: 0.00898695
time to multiply two uint8 vectors: 0.010689
time to divide two uint8 vectors: 0.0331321
time to convert real vector to int8: 0.06004
time to add two int8 vectors: 0.0435431
time to subtract two int8 vectors: 0.033833
time to multiply two int8 vectors: 0.0383649
time to divide two int8 vectors: 0.0757701
time to convert real vector to uint16: 0.0492849
time to add two uint16 vectors: 0.0162971
time to subtract two uint16 vectors: 0.0135579
time to multiply two uint16 vectors: 0.0151451
time to divide two uint16 vectors: 0.039171
time to convert real vector to int16: 0.058059
time to add two int16 vectors: 0.0472121
time to subtract two int16 vectors: 0.0343342
time to multiply two int16 vectors: 0.0399129
time to divide two int16 vectors: 0.078671
time to convert real vector to uint32: 0.062943
time to add two uint32 vectors: 0.0257239
time to subtract two uint32 vectors: 0.0229361
time to multiply two uint32 vectors: 0.0246489
time to divide two uint32 vectors: 0.0485711
time to convert real vector to int32: 0.0584819
time to add two int32 vectors: 0.0551651
time to subtract two int32 vectors: 0.0498068
time to multiply two int32 vectors: 0.055666
time to divide two int32 vectors: 0.092597
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1103
time for [2,1,3,4,5] permutation: 0.110271
time_13425 = 0.1108
time for [1,3,4,2,5] permutation: 0.110775
time_34125 = 0.1486
time for [3,4,1,2,5] permutation: 0.148577
time_45123 = 0.1493
time for [4,5,1,2,3] permutation: 0.149283
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.14018
Time for A'*v nvec-times (v vector): 0.106825
Time for B*A' (B nvec-by-n^2 matrix): 0.063241
Time for v*A' nvec-times (v vector): 0.153215

#####
ubuntu-withno-omit-framepointer-id - Run 2
2024-04-25 18:05:38
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000221968
time for a(i:k:j): 0.337465
time for a(idx): 0.622531
time for a(:,i:j): 0.000232935
time for a(i:j,:): 0.501723
time for a(:,idx): 0.483483
time for a(idx,:): 0.508831
time for a(:,:,i:j,k): 0.000304937
time for a(:,:,k,i:j): 0.145936
time for a(i,j,k,:): 0.136314
time for a(ones(1, k), :), a row vector: 0.438956
time for a(:, ones(1, k)), a column vector: 0.394953
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0514901
time to add two uint8 vectors: 0.00824904
time to subtract two uint8 vectors: 0.00897789
time to multiply two uint8 vectors: 0.0107288
time to divide two uint8 vectors: 0.0332892
time to convert real vector to int8: 0.0602069
time to add two int8 vectors: 0.0386441
time to subtract two int8 vectors: 0.0342031
time to multiply two int8 vectors: 0.038425
time to divide two int8 vectors: 0.0750589
time to convert real vector to uint16: 0.0493391
time to add two uint16 vectors: 0.013479
time to subtract two uint16 vectors: 0.0135372
time to multiply two uint16 vectors: 0.0150969
time to divide two uint16 vectors: 0.038913
time to convert real vector to int16: 0.0580301
time to add two int16 vectors: 0.043896
time to subtract two int16 vectors: 0.0344291
time to multiply two int16 vectors: 0.0398719
time to divide two int16 vectors: 0.0786159
time to convert real vector to uint32: 0.0629749
time to add two uint32 vectors: 0.023102
time to subtract two uint32 vectors: 0.0229912
time to multiply two uint32 vectors: 0.0246499
time to divide two uint32 vectors: 0.0485899
time to convert real vector to int32: 0.0587609
time to add two int32 vectors: 0.0519099
time to subtract two int32 vectors: 0.0497472
time to multiply two int32 vectors: 0.055748
time to divide two int32 vectors: 0.0925379
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1107
time for [2,1,3,4,5] permutation: 0.110691
time_13425 = 0.1103
time for [1,3,4,2,5] permutation: 0.110324
time_34125 = 0.1494
time for [3,4,1,2,5] permutation: 0.149408
time_45123 = 0.1468
time for [4,5,1,2,3] permutation: 0.146814
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.146923
Time for A'*v nvec-times (v vector): 0.104195
Time for B*A' (B nvec-by-n^2 matrix): 0.063328
Time for v*A' nvec-times (v vector): 0.138569

#####
ubuntu-withno-omit-framepointer-id - Run 3
2024-04-25 18:05:52
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000226021
time for a(i:k:j): 0.332743
time for a(idx): 0.618534
time for a(:,i:j): 0.000236034
time for a(i:j,:): 0.499123
time for a(:,idx): 0.481168
time for a(idx,:): 0.507465
time for a(:,:,i:j,k): 0.00030303
time for a(:,:,k,i:j): 0.14527
time for a(i,j,k,:): 0.135284
time for a(ones(1, k), :), a row vector: 0.439799
time for a(:, ones(1, k)), a column vector: 0.3975
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.04896
time to add two uint8 vectors: 0.00863504
time to subtract two uint8 vectors: 0.00942087
time to multiply two uint8 vectors: 0.011065
time to divide two uint8 vectors: 0.0346398
time to convert real vector to int8: 0.0628352
time to add two int8 vectors: 0.0402319
time to subtract two int8 vectors: 0.0355439
time to multiply two int8 vectors: 0.040314
time to divide two int8 vectors: 0.0789521
time to convert real vector to uint16: 0.0518539
time to add two uint16 vectors: 0.0141091
time to subtract two uint16 vectors: 0.013978
time to multiply two uint16 vectors: 0.0157599
time to divide two uint16 vectors: 0.041075
time to convert real vector to int16: 0.0607691
time to add two int16 vectors: 0.046102
time to subtract two int16 vectors: 0.036135
time to multiply two int16 vectors: 0.0419521
time to divide two int16 vectors: 0.0828378
time to convert real vector to uint32: 0.06142
time to add two uint32 vectors: 0.024322
time to subtract two uint32 vectors: 0.0245419
time to multiply two uint32 vectors: 0.0258029
time to divide two uint32 vectors: 0.0512319
time to convert real vector to int32: 0.061214
time to add two int32 vectors: 0.054445
time to subtract two int32 vectors: 0.0525062
time to multiply two int32 vectors: 0.0585239
time to divide two int32 vectors: 0.0971122
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1107
time for [2,1,3,4,5] permutation: 0.1107
time_13425 = 0.1114
time for [1,3,4,2,5] permutation: 0.111421
time_34125 = 0.1504
time for [3,4,1,2,5] permutation: 0.150407
time_45123 = 0.1477
time for [4,5,1,2,3] permutation: 0.14774
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.136759
Time for A'*v nvec-times (v vector): 0.103491
Time for B*A' (B nvec-by-n^2 matrix): 0.0611591
Time for v*A' nvec-times (v vector): 0.139387

#####
ubuntu-withno-omit-framepointer-id - Run 4
2024-04-25 18:06:05
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000226974
time for a(i:k:j): 0.339505
time for a(idx): 0.621868
time for a(:,i:j): 0.000235081
time for a(i:j,:): 0.508346
time for a(:,idx): 0.484618
time for a(idx,:): 0.512672
time for a(:,:,i:j,k): 0.000314951
time for a(:,:,k,i:j): 0.145914
time for a(i,j,k,:): 0.136758
time for a(ones(1, k), :), a row vector: 0.443128
time for a(:, ones(1, k)), a column vector: 0.396694
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.047859
time to add two uint8 vectors: 0.00839496
time to subtract two uint8 vectors: 0.00913501
time to multiply two uint8 vectors: 0.010808
time to divide two uint8 vectors: 0.033663
time to convert real vector to int8: 0.0611229
time to add two int8 vectors: 0.0390258
time to subtract two int8 vectors: 0.034435
time to multiply two int8 vectors: 0.0389609
time to divide two int8 vectors: 0.076225
time to convert real vector to uint16: 0.050133
time to add two uint16 vectors: 0.0135951
time to subtract two uint16 vectors: 0.0137689
time to multiply two uint16 vectors: 0.0152299
time to divide two uint16 vectors: 0.0396199
time to convert real vector to int16: 0.060955
time to add two int16 vectors: 0.0453491
time to subtract two int16 vectors: 0.0354819
time to multiply two int16 vectors: 0.0409071
time to divide two int16 vectors: 0.079987
time to convert real vector to uint32: 0.0637209
time to add two uint32 vectors: 0.024092
time to subtract two uint32 vectors: 0.0230989
time to multiply two uint32 vectors: 0.0250752
time to divide two uint32 vectors: 0.049288
time to convert real vector to int32: 0.0593581
time to add two int32 vectors: 0.052706
time to subtract two int32 vectors: 0.0504088
time to multiply two int32 vectors: 0.0564179
time to divide two int32 vectors: 0.0938921
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1105
time for [2,1,3,4,5] permutation: 0.110534
time_13425 = 0.1115
time for [1,3,4,2,5] permutation: 0.111518
time_34125 = 0.1502
time for [3,4,1,2,5] permutation: 0.15018
time_45123 = 0.1501
time for [4,5,1,2,3] permutation: 0.150083
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.140075
Time for A'*v nvec-times (v vector): 0.105851
Time for B*A' (B nvec-by-n^2 matrix): 0.061614
Time for v*A' nvec-times (v vector): 0.139495

#####
ubuntu-withno-omit-framepointer-id - Run 5
2024-04-25 18:06:18
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000224113
time for a(i:k:j): 0.331617
time for a(idx): 0.624343
time for a(:,i:j): 0.000228167
time for a(i:j,:): 0.505818
time for a(:,idx): 0.481624
time for a(idx,:): 0.507146
time for a(:,:,i:j,k): 0.000299931
time for a(:,:,k,i:j): 0.142876
time for a(i,j,k,:): 0.137184
time for a(ones(1, k), :), a row vector: 0.447419
time for a(:, ones(1, k)), a column vector: 0.401869
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0491621
time to add two uint8 vectors: 0.00860786
time to subtract two uint8 vectors: 0.00947595
time to multiply two uint8 vectors: 0.0111721
time to divide two uint8 vectors: 0.0349391
time to convert real vector to int8: 0.054646
time to add two int8 vectors: 0.0407681
time to subtract two int8 vectors: 0.035928
time to multiply two int8 vectors: 0.0407839
time to divide two int8 vectors: 0.0795121
time to convert real vector to uint16: 0.0518661
time to add two uint16 vectors: 0.01407
time to subtract two uint16 vectors: 0.0140941
time to multiply two uint16 vectors: 0.0157471
time to divide two uint16 vectors: 0.0410411
time to convert real vector to int16: 0.052001
time to add two int16 vectors: 0.046443
time to subtract two int16 vectors: 0.036272
time to multiply two int16 vectors: 0.0420921
time to divide two int16 vectors: 0.0831389
time to convert real vector to uint32: 0.061373
time to add two uint32 vectors: 0.02384
time to subtract two uint32 vectors: 0.0241861
time to multiply two uint32 vectors: 0.025578
time to divide two uint32 vectors: 0.05111
time to convert real vector to int32: 0.0614209
time to add two int32 vectors: 0.054523
time to subtract two int32 vectors: 0.0524201
time to multiply two int32 vectors: 0.0590441
time to divide two int32 vectors: 0.0975678
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1116
time for [2,1,3,4,5] permutation: 0.111626
time_13425 = 0.1120
time for [1,3,4,2,5] permutation: 0.112005
time_34125 = 0.1510
time for [3,4,1,2,5] permutation: 0.151046
time_45123 = 0.1481
time for [4,5,1,2,3] permutation: 0.148123
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.139194
Time for A'*v nvec-times (v vector): 0.0958791
Time for B*A' (B nvec-by-n^2 matrix): 0.061069
Time for v*A' nvec-times (v vector): 0.132878

#####
ubuntu-withno-omit-framepointer-id - Run 6
2024-04-25 18:06:31
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000221968
time for a(i:k:j): 0.338561
time for a(idx): 0.624534
time for a(:,i:j): 0.000233889
time for a(i:j,:): 0.507058
time for a(:,idx): 0.484526
time for a(idx,:): 0.513747
time for a(:,:,i:j,k): 0.000304937
time for a(:,:,k,i:j): 0.144781
time for a(i,j,k,:): 0.136348
time for a(ones(1, k), :), a row vector: 0.441627
time for a(:, ones(1, k)), a column vector: 0.39642
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0477171
time to add two uint8 vectors: 0.00825596
time to subtract two uint8 vectors: 0.00909615
time to multiply two uint8 vectors: 0.0107791
time to divide two uint8 vectors: 0.03352
time to convert real vector to int8: 0.0524459
time to add two int8 vectors: 0.039052
time to subtract two int8 vectors: 0.034379
time to multiply two int8 vectors: 0.039094
time to divide two int8 vectors: 0.0763211
time to convert real vector to uint16: 0.0498359
time to add two uint16 vectors: 0.013643
time to subtract two uint16 vectors: 0.0135889
time to multiply two uint16 vectors: 0.0152991
time to divide two uint16 vectors: 0.04004
time to convert real vector to int16: 0.0499651
time to add two int16 vectors: 0.044795
time to subtract two int16 vectors: 0.03492
time to multiply two int16 vectors: 0.0405729
time to divide two int16 vectors: 0.0799811
time to convert real vector to uint32: 0.0593419
time to add two uint32 vectors: 0.02353
time to subtract two uint32 vectors: 0.0232129
time to multiply two uint32 vectors: 0.0250199
time to divide two uint32 vectors: 0.0491991
time to convert real vector to int32: 0.0593579
time to add two int32 vectors: 0.0525789
time to subtract two int32 vectors: 0.0505402
time to multiply two int32 vectors: 0.0565948
time to divide two int32 vectors: 0.093797
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1111
time for [2,1,3,4,5] permutation: 0.111142
time_13425 = 0.1113
time for [1,3,4,2,5] permutation: 0.111311
time_34125 = 0.1498
time for [3,4,1,2,5] permutation: 0.149786
time_45123 = 0.1492
time for [4,5,1,2,3] permutation: 0.149198
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.138576
Time for A'*v nvec-times (v vector): 0.101509
Time for B*A' (B nvec-by-n^2 matrix): 0.0609391
Time for v*A' nvec-times (v vector): 0.132054

#####
ubuntu-withno-omit-framepointer-id - Run 7
2024-04-25 18:06:44
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000221968
time for a(i:k:j): 0.333461
time for a(idx): 0.621392
time for a(:,i:j): 0.000236034
time for a(i:j,:): 0.505227
time for a(:,idx): 0.479158
time for a(idx,:): 0.506021
time for a(:,:,i:j,k): 0.000295877
time for a(:,:,k,i:j): 0.142141
time for a(i,j,k,:): 0.135761
time for a(ones(1, k), :), a row vector: 0.443989
time for a(:, ones(1, k)), a column vector: 0.399259
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0484591
time to add two uint8 vectors: 0.0086019
time to subtract two uint8 vectors: 0.00938296
time to multiply two uint8 vectors: 0.011107
time to divide two uint8 vectors: 0.034586
time to convert real vector to int8: 0.0537939
time to add two int8 vectors: 0.0402951
time to subtract two int8 vectors: 0.035429
time to multiply two int8 vectors: 0.0401399
time to divide two int8 vectors: 0.0786762
time to convert real vector to uint16: 0.0514741
time to add two uint16 vectors: 0.0140109
time to subtract two uint16 vectors: 0.0141308
time to multiply two uint16 vectors: 0.0157399
time to divide two uint16 vectors: 0.0409091
time to convert real vector to int16: 0.051533
time to add two int16 vectors: 0.0460999
time to subtract two int16 vectors: 0.0360289
time to multiply two int16 vectors: 0.0417392
time to divide two int16 vectors: 0.08233
time to convert real vector to uint32: 0.0608699
time to add two uint32 vectors: 0.023741
time to subtract two uint32 vectors: 0.0239959
time to multiply two uint32 vectors: 0.0255361
time to divide two uint32 vectors: 0.0505311
time to convert real vector to int32: 0.0611219
time to add two int32 vectors: 0.0541291
time to subtract two int32 vectors: 0.0519562
time to multiply two int32 vectors: 0.058126
time to divide two int32 vectors: 0.0967698
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1041
time for [2,1,3,4,5] permutation: 0.104134
time_13425 = 0.1050
time for [1,3,4,2,5] permutation: 0.105039
time_34125 = 0.1432
time for [3,4,1,2,5] permutation: 0.143219
time_45123 = 0.1400
time for [4,5,1,2,3] permutation: 0.139973
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.145999
Time for A'*v nvec-times (v vector): 0.105086
Time for B*A' (B nvec-by-n^2 matrix): 0.0628829
Time for v*A' nvec-times (v vector): 0.141206

#####
ubuntu-withno-omit-framepointer-id - Run 8
2024-04-25 18:06:57
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000224829
time for a(i:k:j): 0.338594
time for a(idx): 0.621937
time for a(:,i:j): 0.000236988
time for a(i:j,:): 0.507273
time for a(:,idx): 0.484302
time for a(idx,:): 0.513039
time for a(:,:,i:j,k): 0.000313044
time for a(:,:,k,i:j): 0.145374
time for a(i,j,k,:): 0.135278
time for a(ones(1, k), :), a row vector: 0.447712
time for a(:, ones(1, k)), a column vector: 0.404027
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0474169
time to add two uint8 vectors: 0.00833893
time to subtract two uint8 vectors: 0.00909805
time to multiply two uint8 vectors: 0.0107701
time to divide two uint8 vectors: 0.033447
time to convert real vector to int8: 0.052279
time to add two int8 vectors: 0.0393691
time to subtract two int8 vectors: 0.034328
time to multiply two int8 vectors: 0.0389471
time to divide two int8 vectors: 0.076046
time to convert real vector to uint16: 0.049907
time to add two uint16 vectors: 0.013623
time to subtract two uint16 vectors: 0.013624
time to multiply two uint16 vectors: 0.0151992
time to divide two uint16 vectors: 0.039448
time to convert real vector to int16: 0.0502179
time to add two int16 vectors: 0.0470061
time to subtract two int16 vectors: 0.036623
time to multiply two int16 vectors: 0.0413339
time to divide two int16 vectors: 0.0802209
time to convert real vector to uint32: 0.0591991
time to add two uint32 vectors: 0.0235648
time to subtract two uint32 vectors: 0.023217
time to multiply two uint32 vectors: 0.024982
time to divide two uint32 vectors: 0.049087
time to convert real vector to int32: 0.0592861
time to add two int32 vectors: 0.052552
time to subtract two int32 vectors: 0.0503922
time to multiply two int32 vectors: 0.0563691
time to divide two int32 vectors: 0.0935709
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1109
time for [2,1,3,4,5] permutation: 0.110881
time_13425 = 0.1114
time for [1,3,4,2,5] permutation: 0.111405
time_34125 = 0.1510
time for [3,4,1,2,5] permutation: 0.150964
time_45123 = 0.1489
time for [4,5,1,2,3] permutation: 0.148858
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.151426
Time for A'*v nvec-times (v vector): 0.107891
Time for B*A' (B nvec-by-n^2 matrix): 0.06271
Time for v*A' nvec-times (v vector): 0.154216

#####
ubuntu-withno-omit-framepointer-id - Run 9
2024-04-25 18:07:10
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.00022006
time for a(i:k:j): 0.330563
time for a(idx): 0.613551
time for a(:,i:j): 0.000226021
time for a(i:j,:): 0.499602
time for a(:,idx): 0.477202
time for a(idx,:): 0.505175
time for a(:,:,i:j,k): 0.000288963
time for a(:,:,k,i:j): 0.14358
time for a(i,j,k,:): 0.133434
time for a(ones(1, k), :), a row vector: 0.436213
time for a(:, ones(1, k)), a column vector: 0.392793
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0468731
time to add two uint8 vectors: 0.00820994
time to subtract two uint8 vectors: 0.00897884
time to multiply two uint8 vectors: 0.0106978
time to divide two uint8 vectors: 0.0332482
time to convert real vector to int8: 0.06036
time to add two int8 vectors: 0.038584
time to subtract two int8 vectors: 0.033932
time to multiply two int8 vectors: 0.0385678
time to divide two int8 vectors: 0.075165
time to convert real vector to uint16: 0.0534229
time to add two uint16 vectors: 0.013341
time to subtract two uint16 vectors: 0.0135121
time to multiply two uint16 vectors: 0.014966
time to divide two uint16 vectors: 0.0389309
time to convert real vector to int16: 0.0577729
time to add two int16 vectors: 0.0438771
time to subtract two int16 vectors: 0.0343819
time to multiply two int16 vectors: 0.0398638
time to divide two int16 vectors: 0.0786259
time to convert real vector to uint32: 0.0628819
time to add two uint32 vectors: 0.023104
time to subtract two uint32 vectors: 0.022856
time to multiply two uint32 vectors: 0.0246141
time to divide two uint32 vectors: 0.0483711
time to convert real vector to int32: 0.0585618
time to add two int32 vectors: 0.051847
time to subtract two int32 vectors: 0.0497022
time to multiply two int32 vectors: 0.0556171
time to divide two int32 vectors: 0.092519
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1113
time for [2,1,3,4,5] permutation: 0.111335
time_13425 = 0.1118
time for [1,3,4,2,5] permutation: 0.111776
time_34125 = 0.1500
time for [3,4,1,2,5] permutation: 0.150031
time_45123 = 0.1503
time for [4,5,1,2,3] permutation: 0.150327
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.14666
Time for A'*v nvec-times (v vector): 0.0876079
Time for B*A' (B nvec-by-n^2 matrix): 0.061132
Time for v*A' nvec-times (v vector): 0.147893

#####
ubuntu-withno-omit-framepointer-id - Run 10
2024-04-25 18:07:21
#####
Running benchmark: benchmark_index
Test speed of array indexing.

array size (n) = 4e+06
number of repeats (rep) = 100
time for a(i:j): 0.000221968
time for a(i:k:j): 0.336928
time for a(idx): 0.630769
time for a(:,i:j): 0.000237942
time for a(i:j,:): 0.510393
time for a(:,idx): 0.484157
time for a(idx,:): 0.512382
time for a(:,:,i:j,k): 0.000306129
time for a(:,:,k,i:j): 0.146674
time for a(i,j,k,:): 0.137046
time for a(ones(1, k), :), a row vector: 0.446751
time for a(:, ones(1, k)), a column vector: 0.404485
Running benchmark: benchmark_intmath
Test speed of integer math & conversions.

array size (n) = 1e+07
ratio of intmath for generating integers (ratio) = 0.6
time to convert real vector to uint8: 0.0476351
time to add two uint8 vectors: 0.00822997
time to subtract two uint8 vectors: 0.00912714
time to multiply two uint8 vectors: 0.010859
time to divide two uint8 vectors: 0.0336671
time to convert real vector to int8: 0.0523231
time to add two int8 vectors: 0.0391378
time to subtract two int8 vectors: 0.0344789
time to multiply two int8 vectors: 0.0391531
time to divide two int8 vectors: 0.0763931
time to convert real vector to uint16: 0.0499301
time to add two uint16 vectors: 0.0135729
time to subtract two uint16 vectors: 0.0137248
time to multiply two uint16 vectors: 0.015409
time to divide two uint16 vectors: 0.039561
time to convert real vector to int16: 0.04985
time to add two int16 vectors: 0.044667
time to subtract two int16 vectors: 0.0348721
time to multiply two int16 vectors: 0.0404661
time to divide two int16 vectors: 0.0795481
time to convert real vector to uint32: 0.0634432
time to add two uint32 vectors: 0.023293
time to subtract two uint32 vectors: 0.0232511
time to multiply two uint32 vectors: 0.0249379
time to divide two uint32 vectors: 0.049057
time to convert real vector to int32: 0.0590999
time to add two int32 vectors: 0.0524499
time to subtract two int32 vectors: 0.050185
time to multiply two int32 vectors: 0.056149
time to divide two int32 vectors: 0.0936689
Running benchmark: benchmark_permute
Test speed of array permuting.

dimension size (n^5 is number of elements) (n) = 30
time_21345 = 0.1104
time for [2,1,3,4,5] permutation: 0.11041
time_13425 = 0.1107
time for [1,3,4,2,5] permutation: 0.110688
time_34125 = 0.1493
time for [3,4,1,2,5] permutation: 0.149321
time_45123 = 0.1479
time for [4,5,1,2,3] permutation: 0.147929
Running benchmark: benchmark_stmm
Sparse transposed matrix-vector multiplication benchmark.
This is to test the "compound operators" feature introduced in Octave.

dimension of matrix (n) = 300
number of vector op repeats (nvec) = 100
constructing sparse matrix
Time for A'*B (B n^2-by-nvec matrix): 0.149143
Time for A'*v nvec-times (v vector): 0.104163
Time for B*A' (B nvec-by-n^2 matrix): 0.0628798
Time for v*A' nvec-times (v vector): 0.162827

